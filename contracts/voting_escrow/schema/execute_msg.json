{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "This structure describes the execute messages of the contract.",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "extend_lock_amount"
      ],
      "properties": {
        "extend_lock_amount": {
          "type": "object",
          "required": [
            "amount",
            "user"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "user": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "extend_lock_time"
      ],
      "properties": {
        "extend_lock_time": {
          "type": "object",
          "required": [
            "amount",
            "time",
            "user"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "user": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Receives a message of type [`Cw20ReceiveMsg`] and processes it depending on the received template.",
      "type": "object",
      "required": [
        "withdraw"
      ],
      "properties": {
        "withdraw": {
          "type": "object",
          "required": [
            "amount",
            "user"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "user": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_marketing"
      ],
      "properties": {
        "update_marketing": {
          "type": "object",
          "properties": {
            "description": {
              "description": "A longer description of the token and it's utility. Designed for tooltips or such",
              "type": [
                "string",
                "null"
              ]
            },
            "marketing": {
              "description": "The address (if any) who can update this data structure",
              "type": [
                "string",
                "null"
              ]
            },
            "project": {
              "description": "A URL pointing to the project behind this token.",
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "upload_logo"
      ],
      "properties": {
        "upload_logo": {
          "$ref": "#/definitions/Logo"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "EmbeddedLogo": {
      "description": "This is used to store the logo on the blockchain in an accepted format. Enforce maximum size of 5KB on all variants.",
      "oneOf": [
        {
          "description": "Store the Logo as an SVG file. The content must conform to the spec at https://en.wikipedia.org/wiki/Scalable_Vector_Graphics (The contract should do some light-weight sanity-check validation)",
          "type": "object",
          "required": [
            "svg"
          ],
          "properties": {
            "svg": {
              "$ref": "#/definitions/Binary"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Store the Logo as a PNG file. This will likely only support up to 64x64 or so within the 5KB limit.",
          "type": "object",
          "required": [
            "png"
          ],
          "properties": {
            "png": {
              "$ref": "#/definitions/Binary"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Logo": {
      "description": "This is used for uploading logo data, or setting it in InstantiateData",
      "oneOf": [
        {
          "description": "A reference to an externally hosted logo. Must be a valid HTTP or HTTPS URL.",
          "type": "object",
          "required": [
            "url"
          ],
          "properties": {
            "url": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Logo content stored on the blockchain. Enforce maximum size of 5KB on all variants",
          "type": "object",
          "required": [
            "embedded"
          ],
          "properties": {
            "embedded": {
              "$ref": "#/definitions/EmbeddedLogo"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
